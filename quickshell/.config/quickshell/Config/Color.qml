pragma Singleton
pragma ComponentBehavior: Bound
import QtQuick
import Quickshell
import Quickshell.Io
import qs.Config
import qs.Services.Utils

/*
Obelisk is not strictly a Material Design project, it supports both some predefined
color schemes and dynamic color generation from the wallpaper (using Matugen).

We ultimately decided to use a restricted set of colors that follows the
Material Design 3 naming convention.

NOTE: All color names are prefixed with 'm' (e.g., mPrimary) to prevent QML from
misinterpreting them as signals (e.g., the 'onPrimary' property name).
*/
Singleton {
  id: root

  // --- Utility Colors: These colors serve specific, universal purposes like indicating errors
  property color mError: customColors.mError
  property color mOnError: customColors.mOnError
  property color mOnPrimary: customColors.mOnPrimary
  property color mOnSecondary: customColors.mOnSecondary
  property color mOnSurface: customColors.mOnSurface
  property color mOnSurfaceVariant: customColors.mOnSurfaceVariant
  property color mOnTertiary: customColors.mOnTertiary
  property color mOutline: customColors.mOutline

  // --- Key Colors: These are the main accent colors that define your app's style
  property color mPrimary: customColors.mPrimary
  property color mSecondary: customColors.mSecondary
  property color mShadow: customColors.mShadow

  // --- Surface and Variant Colors: These provide additional options for surfaces and their contents, creating visual hierarchy
  property color mSurface: customColors.mSurface
  property color mSurfaceVariant: customColors.mSurfaceVariant
  property color mTertiary: customColors.mTertiary
  property color transparent: "transparent"

  // -----------
  function applyOpacity(color, opacity) {
    // Convert color to string and apply opacity
    if (!color)
      return "transparent";
    return color.toString().replace("#", "#" + opacity);
  }

  // --------------------------------
  // Default colors: RosePine
  QtObject {
    id: defaultColors

    property color mError: "#e9899d"
    property color mOnError: "#1e1418"
    property color mOnPrimary: "#1a151f"
    property color mOnSecondary: "#f3edf7"
    property color mOnSurface: "#e9e4f0"
    property color mOnSurfaceVariant: "#a79ab0"
    property color mOnTertiary: "#20161f"
    property color mOutline: "#342c42"
    property color mPrimary: "#c7a1d8"
    property color mSecondary: "#a984c4"
    property color mShadow: "#120f18"
    property color mSurface: "#1c1822"
    property color mSurfaceVariant: "#262130"
    property color mTertiary: "#e0b7c9"
  }

  // ----------------------------------------------------------------
  // Custom colors loaded from colors.json
  // These can be generated by matugen or simply come from a well know color scheme (Dracula, Gruvbox, Nord, ...)
  QtObject {
    id: customColors

    property color mError: root.mError
    property color mOnError: root.mOnError
    property color mOnPrimary: root.mOnPrimary
    property color mOnSecondary: root.mOnSecondary
    property color mOnSurface: root.mOnSurface
    property color mOnSurfaceVariant: root.mOnSurfaceVariant
    property color mOnTertiary: root.mOnTertiary
    property color mOutline: root.mOutline
    property color mPrimary: root.mPrimary
    property color mSecondary: root.mSecondary
    property color mShadow: root.mShadow
    property color mSurface: root.mSurface
    property color mSurfaceVariant: root.mSurfaceVariant
    property color mTertiary: root.mTertiary
  }

  // FileView to load custom colors data from colors.json
  FileView {
    id: customColorsFile

    path: Settings.configDir + "colors.json"
    watchChanges: true

    onAdapterUpdated: {
      Logger.log("Color", "Writing colors to disk");
      writeAdapter();
    }
    onFileChanged: {
      Logger.log("Color", "Reloading colors from disk");
      reload();
    }
    onLoadFailed: function (error) {
      if (error.toString().includes("No such file") || error === 2) {
        // File doesn't exist, create it with default values
        writeAdapter();
      }
    }

    JsonAdapter {
      id: customColorsData

      property color mError: defaultColors.mError
      property color mOnError: defaultColors.mOnError
      property color mOnPrimary: defaultColors.mOnPrimary
      property color mOnSecondary: defaultColors.mOnSecondary
      property color mOnSurface: defaultColors.mOnSurface
      property color mOnSurfaceVariant: defaultColors.mOnSurfaceVariant
      property color mOnTertiary: defaultColors.mOnTertiary
      property color mOutline: defaultColors.mOutline
      property color mPrimary: defaultColors.mPrimary
      property color mSecondary: defaultColors.mSecondary
      property color mShadow: defaultColors.mShadow
      property color mSurface: defaultColors.mSurface
      property color mSurfaceVariant: defaultColors.mSurfaceVariant
      property color mTertiary: defaultColors.mTertiary
    }
  }
}
